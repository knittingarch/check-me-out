openapi: 3.0.1
info:
  title: Books API V1
  version: v1
  description: A simple library management API for managing books and authors
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Returns a list of all books in the library with their associated authors
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              example:
                - id: 1
                  title: "The Great Gatsby"
                  isbn: "978-0-7432-7356-5"
                  published_date: "1925-04-10"
                  status: "available"
                  borrowed_until: null
                  created_at: "2023-01-01T00:00:00Z"
                  updated_at: "2023-01-01T00:00:00Z"
                  authors:
                    - id: 1
                      name: "F. Scott Fitzgerald"
    post:
      tags:
        - Books
      summary: Create a new book
      description: Creates a new book in the library
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                book:
                  $ref: '#/components/schemas/BookInput'
            example:
              book:
                title: "New Book"
                isbn: "978-1-234-56789-0"
                published_date: "2023-01-01"
                status: "available"
                author_ids: [1]
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /books/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Book ID
    get:
      tags:
        - Books
      summary: Get a specific book
      description: Returns a specific book by ID with its associated authors
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Books
      summary: Update a book
      description: Updates an existing book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                book:
                  $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Books
      summary: Delete a book
      description: Deletes a book from the library
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/search:
    get:
      tags:
        - Books
      summary: Search books
      description: Search books with various filters, sorting, and pagination
      parameters:
        - name: filter[q]
          in: query
          description: General search query (searches title, author, and ISBN)
          schema:
            type: string
          example: "gatsby"
        - name: filter[title]
          in: query
          description: Filter by book title (comma-separated for multiple)
          schema:
            type: string
          example: "gatsby,mockingbird"
        - name: filter[author]
          in: query
          description: Filter by author name (comma-separated for multiple)
          schema:
            type: string
          example: "fitzgerald,lee"
        - name: filter[isbn]
          in: query
          description: Filter by ISBN (comma-separated for multiple)
          schema:
            type: string
          example: "978-0-7432-7356-5"
        - name: filter[status]
          in: query
          description: Filter by book status
          schema:
            type: string
            enum: [available, borrowed, reserved]
          example: "available"
        - name: filter[borrowed_until]
          in: query
          description: Filter books available before this date (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2023-12-31"
        - name: sort
          in: query
          description: Sort fields (comma-separated, prefix with - for descending)
          schema:
            type: string
          example: "title,-published_date"
        - name: page
          in: query
          description: Page number (default 1)
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Results per page (1-100, default 20)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
      responses:
        '200':
          description: Search results with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
              example:
                books:
                  - id: 1
                    title: "The Great Gatsby"
                    isbn: "978-0-7432-7356-5"
                    published_date: "1925-04-10"
                    status: "available"
                    borrowed_until: null
                    created_at: "2023-01-01T00:00:00Z"
                    updated_at: "2023-01-01T00:00:00Z"
                    authors:
                      - id: 1
                        name: "F. Scott Fitzgerald"
                pagination:
                  current_page: 1
                  per_page: 20
                  total_count: 1
                  total_pages: 1
                  has_next_page: false
                  has_previous_page: false
        '400':
          description: Bad request (invalid parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_filter:
                  summary: Missing filter parameters
                  value:
                    error: "At least one search parameter is required"
                invalid_status:
                  summary: Invalid status value
                  value:
                    error: "Invalid status. Must be: available, borrowed, reserved"
                invalid_date:
                  summary: Invalid date format
                  value:
                    error: "Invalid date format. Please use YYYY-MM-DD."
                invalid_page:
                  summary: Invalid page number
                  value:
                    error: "Page must be 1 or greater"
                invalid_per_page:
                  summary: Invalid per_page value
                  value:
                    error: "Per page must be between 1 and 100"
                invalid_sort:
                  summary: Invalid sort field
                  value:
                    error: "Invalid sort field: invalid_field. Valid fields are: title, author, isbn, published_date, status, borrowed_until, created_at, updated_at"

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "The Great Gatsby"
        isbn:
          type: string
          example: "978-0-7432-7356-5"
        published_date:
          type: string
          format: date
          example: "1925-04-10"
        status:
          type: string
          enum: [available, borrowed, reserved]
          example: "available"
        borrowed_until:
          type: string
          format: date
          nullable: true
          example: "2023-12-31"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
      required:
        - id
        - title
        - isbn
        - status
        - created_at
        - updated_at
        - authors

    Author:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "F. Scott Fitzgerald"
      required:
        - id
        - name

    BookInput:
      type: object
      properties:
        title:
          type: string
          example: "The Great Gatsby"
        isbn:
          type: string
          example: "978-0-7432-7356-5"
        published_date:
          type: string
          format: date
          example: "1925-04-10"
        status:
          type: string
          enum: [available, borrowed, reserved]
          example: "available"
        borrowed_until:
          type: string
          format: date
          nullable: true
          example: "2023-12-31"
        author_ids:
          type: array
          items:
            type: integer
          example: [1, 2]
      required:
        - title
        - isbn
        - status

    SearchResponse:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - books
        - pagination

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 20
        total_count:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 5
        has_next_page:
          type: boolean
          example: true
        has_previous_page:
          type: boolean
          example: false
      required:
        - current_page
        - per_page
        - total_count
        - total_pages
        - has_next_page
        - has_previous_page

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Record not found"
      required:
        - error

    ValidationError:
      type: object
      properties:
        title:
          type: array
          items:
            type: string
          example: ["can't be blank"]
        isbn:
          type: array
          items:
            type: string
          example: ["can't be blank"]
      additionalProperties:
        type: array
        items:
          type: string
